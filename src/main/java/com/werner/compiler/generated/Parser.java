
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.werner.compiler.generated;

import java_cup.runtime.ComplexSymbolFactory;
import com.werner.compiler.ast.Program;
import com.werner.compiler.ast.statements.AssignStatement;
import com.werner.compiler.ast.statements.EmptyStatement;
import com.werner.compiler.ast.statements.Statement;
import com.werner.compiler.ast.statements.WhileStatement;
import com.werner.compiler.ast.statements.ProcedureCall;
import com.werner.compiler.ast.expressions.Expression;
import com.werner.compiler.ast.expressions.BinaryExpression;
import com.werner.compiler.ast.Identifier;
import com.werner.compiler.ast.expressions.literals.IntLiteral;
import com.werner.compiler.ast.PrimitiveType;
import com.werner.compiler.ast.statements.IfStatement;
import com.werner.compiler.ast.expressions.literals.BooleanLiteral;
import com.werner.compiler.ast.expressions.Operator;
import com.werner.compiler.ast.expressions.VariableExpression;
import com.werner.compiler.ast.declaration.VariableDeclaration;
import com.werner.compiler.ast.expressions.type.AbstractTypeExpression;
import com.werner.compiler.ast.expressions.type.ArrayTypeExpression;
import com.werner.compiler.ast.expressions.type.NamedTypeExpression;
import com.werner.compiler.ast.expressions.type.PrimitiveTypeExpression;
import com.werner.compiler.ast.expressions.type.RecordTypeExpression;
import com.werner.compiler.ast.declaration.TypeDeclaration;
import com.werner.compiler.ast.declaration.FunctionDeclaration;
import com.werner.compiler.ast.statements.VariableDeclarationStatement;
import com.werner.compiler.ast.statements.ReturnStatement;
import com.werner.compiler.ast.expressions.FunctionCall;
import java.util.List;
import java.util.ArrayList;
import java.util.Optional;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\006\003\000\002\002\004\000\002\007" +
    "\002\000\002\007\004\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\012\003\000\002\011\006\000\002\017" +
    "\011\000\002\017\015\000\002\020\011\000\002\013\005" +
    "\000\002\030\007\000\002\031\014\000\002\014\005\000" +
    "\002\016\006\000\002\015\006\000\002\021\005\000\002" +
    "\021\005\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\025\003\000\002\026\010\000\002\026\010" +
    "\000\002\027\006\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\022\002\000\002\022\003\000\002" +
    "\022\005\000\002\005\002\000\002\005\003\000\002\005" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\003" +
    "\000\002\002\003\000\002\003\005\000\002\003\005\000" +
    "\002\003\003\000\002\004\003\000\002\004\005\000\002" +
    "\004\004\000\002\004\003\000\002\004\003\000\002\004" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\024\002\uffff\004\004\022\015\024\011\026" +
    "\007\031\026\040\021\041\014\042\013\001\002\000\026" +
    "\002\ufff4\004\ufff4\017\ufff4\022\ufff4\024\ufff4\026\ufff4\031" +
    "\ufff4\040\ufff4\041\ufff4\042\ufff4\001\002\000\026\002\uffff" +
    "\004\004\017\uffff\022\015\024\011\026\007\031\026\040" +
    "\021\041\014\042\013\001\002\000\026\002\ufff8\004\ufff8" +
    "\017\ufff8\022\ufff8\024\ufff8\026\ufff8\031\ufff8\040\ufff8\041" +
    "\ufff8\042\ufff8\001\002\000\006\013\156\015\157\001\002" +
    "\000\026\002\ufffa\004\ufffa\017\ufffa\022\ufffa\024\ufffa\026" +
    "\ufffa\031\ufffa\040\ufffa\041\ufffa\042\ufffa\001\002\000\004" +
    "\013\150\001\002\000\026\002\ufff9\004\ufff9\017\ufff9\022" +
    "\ufff9\024\ufff9\026\ufff9\031\ufff9\040\ufff9\041\ufff9\042\ufff9" +
    "\001\002\000\016\010\071\013\102\025\073\026\072\027" +
    "\075\030\077\001\002\000\004\026\135\001\002\000\004" +
    "\013\070\001\002\000\004\002\067\001\002\000\026\002" +
    "\ufffb\004\ufffb\017\ufffb\022\ufffb\024\ufffb\026\ufffb\031\ufffb" +
    "\040\ufffb\041\ufffb\042\ufffb\001\002\000\026\002\ufff6\004" +
    "\ufff6\017\ufff6\022\ufff6\024\ufff6\026\ufff6\031\ufff6\040\ufff6" +
    "\041\ufff6\042\ufff6\001\002\000\004\026\063\001\002\000" +
    "\026\002\ufffd\004\ufffd\017\ufffd\022\ufffd\024\ufffd\026\ufffd" +
    "\031\ufffd\040\ufffd\041\ufffd\042\ufffd\001\002\000\004\002" +
    "\001\001\002\000\026\002\ufff7\004\ufff7\017\ufff7\022\ufff7" +
    "\024\ufff7\026\ufff7\031\ufff7\040\ufff7\041\ufff7\042\ufff7\001" +
    "\002\000\026\002\ufff5\004\ufff5\017\ufff5\022\ufff5\024\ufff5" +
    "\026\ufff5\031\ufff5\040\ufff5\041\ufff5\042\ufff5\001\002\000" +
    "\004\026\030\001\002\000\026\002\ufffc\004\ufffc\017\ufffc" +
    "\022\ufffc\024\ufffc\026\ufffc\031\ufffc\040\ufffc\041\ufffc\042" +
    "\ufffc\001\002\000\004\005\033\001\002\000\004\004\032" +
    "\001\002\000\026\002\uffef\004\uffef\017\uffef\022\uffef\024" +
    "\uffef\026\uffef\031\uffef\040\uffef\041\uffef\042\uffef\001\002" +
    "\000\016\026\035\032\044\033\036\034\041\035\040\037" +
    "\043\001\002\000\014\004\uffe6\006\uffe6\014\uffe6\016\uffe6" +
    "\017\uffe6\001\002\000\012\004\uffe8\006\uffe8\014\uffe8\017" +
    "\uffe8\001\002\000\014\004\uffdf\006\uffdf\014\uffdf\016\uffdf" +
    "\017\uffdf\001\002\000\014\004\uffe5\006\uffe5\014\uffe5\016" +
    "\uffe5\017\uffe5\001\002\000\004\020\055\001\002\000\014" +
    "\004\uffde\006\uffde\014\uffde\016\uffde\017\uffde\001\002\000" +
    "\012\004\uffe9\006\uffe9\014\uffe9\017\uffe9\001\002\000\004" +
    "\016\047\001\002\000\014\004\uffe0\006\uffe0\014\uffe0\016" +
    "\uffe0\017\uffe0\001\002\000\014\004\uffe4\006\uffe4\014\uffe4" +
    "\016\uffe4\017\uffe4\001\002\000\014\004\uffe7\006\uffe7\014" +
    "\uffe7\016\uffe7\017\uffe7\001\002\000\006\017\uffdd\026\030" +
    "\001\002\000\004\017\054\001\002\000\010\006\052\014" +
    "\uffdc\017\uffdc\001\002\000\010\014\uffdd\017\uffdd\026\030" +
    "\001\002\000\006\014\uffdb\017\uffdb\001\002\000\014\004" +
    "\uffe1\006\uffe1\014\uffe1\016\uffe1\017\uffe1\001\002\000\004" +
    "\025\056\001\002\000\004\021\057\001\002\000\004\036" +
    "\060\001\002\000\016\026\061\032\044\033\036\034\041" +
    "\035\040\037\043\001\002\000\014\004\uffe2\006\uffe2\014" +
    "\uffe2\016\uffe2\017\uffe2\001\002\000\014\004\uffe3\006\uffe3" +
    "\014\uffe3\016\uffe3\017\uffe3\001\002\000\004\015\064\001" +
    "\002\000\014\032\044\033\036\034\041\035\040\037\043" +
    "\001\002\000\004\004\066\001\002\000\026\002\uffee\004" +
    "\uffee\017\uffee\022\uffee\024\uffee\026\uffee\031\uffee\040\uffee" +
    "\041\uffee\042\uffee\001\002\000\004\002\000\001\002\000" +
    "\016\010\071\013\102\025\073\026\072\027\075\030\077" +
    "\001\002\000\016\010\071\013\102\025\073\026\110\027" +
    "\075\030\077\001\002\000\022\004\uffcd\006\uffcd\007\uffcd" +
    "\010\uffcd\011\uffcd\012\uffcd\013\126\014\uffcd\001\002\000" +
    "\020\004\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\014\uffd0\001\002\000\020\004\uffd5\006\uffd5\007\uffd5\010" +
    "\uffd5\011\111\012\112\014\uffd5\001\002\000\020\004\uffcc" +
    "\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\014\uffcc\001" +
    "\002\000\014\004\uffd4\006\uffd4\007\uffd4\010\uffd4\014\uffd4" +
    "\001\002\000\020\004\uffcb\006\uffcb\007\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\014\uffcb\001\002\000\020\004\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\012\uffd1\014\uffd1\001\002\000" +
    "\010\007\105\010\106\014\116\001\002\000\016\010\071" +
    "\013\102\025\073\026\072\027\075\030\077\001\002\000" +
    "\010\007\105\010\106\014\104\001\002\000\020\004\uffcf" +
    "\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\014\uffcf\001" +
    "\002\000\016\010\071\013\102\025\073\026\110\027\075" +
    "\030\077\001\002\000\016\010\071\013\102\025\073\026" +
    "\110\027\075\030\077\001\002\000\020\004\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\011\111\012\112\014\uffd6\001\002\000" +
    "\020\004\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\014\uffcd\001\002\000\016\010\071\013\102\025\073\026" +
    "\110\027\075\030\077\001\002\000\016\010\071\013\102" +
    "\025\073\026\110\027\075\030\077\001\002\000\020\004" +
    "\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\014\uffd2" +
    "\001\002\000\020\004\uffd3\006\uffd3\007\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\014\uffd3\001\002\000\020\004\uffd7\006\uffd7" +
    "\007\uffd7\010\uffd7\011\111\012\112\014\uffd7\001\002\000" +
    "\004\016\117\001\002\000\024\004\004\017\uffff\022\015" +
    "\024\011\026\007\031\026\040\021\041\014\042\013\001" +
    "\002\000\004\017\121\001\002\000\030\002\ufff2\004\ufff2" +
    "\017\ufff2\022\ufff2\023\122\024\ufff2\026\ufff2\031\ufff2\040" +
    "\ufff2\041\ufff2\042\ufff2\001\002\000\004\016\123\001\002" +
    "\000\024\004\004\017\uffff\022\015\024\011\026\007\031" +
    "\026\040\021\041\014\042\013\001\002\000\004\017\125" +
    "\001\002\000\026\002\ufff1\004\ufff1\017\ufff1\022\ufff1\024" +
    "\ufff1\026\ufff1\031\ufff1\040\ufff1\041\ufff1\042\ufff1\001\002" +
    "\000\020\010\071\013\102\014\uffda\025\073\026\072\027" +
    "\075\030\077\001\002\000\012\006\132\007\105\010\106" +
    "\014\uffd9\001\002\000\004\014\131\001\002\000\014\004" +
    "\uffea\006\uffea\007\uffea\010\uffea\014\uffea\001\002\000\020" +
    "\010\071\013\102\014\uffda\025\073\026\072\027\075\030" +
    "\077\001\002\000\004\014\uffd8\001\002\000\020\004\uffce" +
    "\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\014\uffce\001" +
    "\002\000\004\013\136\001\002\000\006\014\uffdd\026\030" +
    "\001\002\000\004\014\140\001\002\000\004\005\141\001" +
    "\002\000\014\032\044\033\036\034\041\035\040\037\043" +
    "\001\002\000\004\016\143\001\002\000\024\004\004\017" +
    "\uffff\022\015\024\011\026\007\031\026\040\021\041\014" +
    "\042\013\001\002\000\004\017\145\001\002\000\026\002" +
    "\uffed\004\uffed\017\uffed\022\uffed\024\uffed\026\uffed\031\uffed" +
    "\040\uffed\041\uffed\042\uffed\001\002\000\010\004\147\007" +
    "\105\010\106\001\002\000\026\002\uffec\004\uffec\017\uffec" +
    "\022\uffec\024\uffec\026\uffec\031\uffec\040\uffec\041\uffec\042" +
    "\uffec\001\002\000\016\010\071\013\102\025\073\026\072" +
    "\027\075\030\077\001\002\000\010\007\105\010\106\014" +
    "\152\001\002\000\004\016\153\001\002\000\024\004\004" +
    "\017\uffff\022\015\024\011\026\007\031\026\040\021\041" +
    "\014\042\013\001\002\000\004\017\155\001\002\000\026" +
    "\002\ufff0\004\ufff0\017\ufff0\022\ufff0\024\ufff0\026\ufff0\031" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\001\002\000\020\010\071" +
    "\013\102\014\uffda\025\073\026\072\027\075\030\077\001" +
    "\002\000\016\010\071\013\102\025\073\026\072\027\075" +
    "\030\077\001\002\000\010\004\161\007\105\010\106\001" +
    "\002\000\026\002\ufff3\004\ufff3\017\ufff3\022\ufff3\024\ufff3" +
    "\026\ufff3\031\ufff3\040\ufff3\041\ufff3\042\ufff3\001\002\000" +
    "\004\014\163\001\002\000\026\002\uffeb\004\uffeb\017\uffeb" +
    "\022\uffeb\024\uffeb\026\uffeb\031\uffeb\040\uffeb\041\uffeb\042" +
    "\uffeb\001\002\000\006\002\ufffe\017\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\032\006\015\007\022\010\004\011\021\012" +
    "\026\013\005\014\024\016\016\017\007\020\011\030\023" +
    "\031\017\001\001\000\002\001\001\000\030\007\163\010" +
    "\004\011\021\012\026\013\005\014\024\016\016\017\007" +
    "\020\011\030\023\031\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\145\003\073\004\077\015\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\023\044\024\041\025\045\026\033\027\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\050\022\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\050\022\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\023\044" +
    "\024\061\025\045\026\033\027\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\023\044" +
    "\024\064\025\045\026\033\027\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\100" +
    "\003\073\004\077\015\075\001\001\000\004\004\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\102\003\073" +
    "\004\077\015\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\114\004\077\001\001\000\006\003\106" +
    "\004\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\113\001\001\000\004\004\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\007\117\010\004\011\021\012\026\013\005" +
    "\014\024\016\016\017\007\020\011\030\023\031\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\007\123\010\004\011\021\012\026\013\005\014" +
    "\024\016\016\017\007\020\011\030\023\031\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\126\003" +
    "\073\004\077\005\127\015\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\126\003" +
    "\073\004\077\005\132\015\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\050\022" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\023\044\024\141\025\045\026\033\027\036\001\001\000" +
    "\002\001\001\000\030\007\143\010\004\011\021\012\026" +
    "\013\005\014\024\016\016\017\007\020\011\030\023\031" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\150\003\073\004" +
    "\077\015\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\007\153\010\004\011\021\012\026\013\005\014" +
    "\024\016\016\017\007\020\011\030\023\031\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\126\003" +
    "\073\004\077\005\161\015\075\001\001\000\012\002\157" +
    "\003\073\004\077\015\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {

        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }

        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);

        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= statement_list 
            {
              Object RESULT =null;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> stmnts = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(new ComplexSymbolFactory.Location(stmntsleft, stmntsright), stmnts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_list ::= 
            {
              List<Statement> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_list ::= statement statement_list 
            {
              List<Statement> RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statement_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statement_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> statement_list = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 statement_list.add(0, statement); RESULT = statement_list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= assign_statement 
            {
              Statement RESULT =null;
		int assign_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assign_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AssignStatement assign_statement = (AssignStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = assign_statement; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= empty_statement 
            {
              Statement RESULT =null;
		int empty_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int empty_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EmptyStatement empty_statement = (EmptyStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = empty_statement; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= procedure_call 
            {
              Statement RESULT =null;
		int procedure_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int procedure_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcedureCall procedure_call = (ProcedureCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = procedure_call; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= if_statement 
            {
              Statement RESULT =null;
		int if_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int if_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfStatement if_statement = (IfStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = if_statement; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= while_statement 
            {
              Statement RESULT =null;
		int while_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int while_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileStatement while_statement = (WhileStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = while_statement; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= variable_declaration_statement 
            {
              Statement RESULT =null;
		int variable_declaration_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variable_declaration_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VariableDeclarationStatement variable_declaration_statement = (VariableDeclarationStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = variable_declaration_statement; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= type_declaration 
            {
              Statement RESULT =null;
		int type_declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int type_declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeDeclaration type_declaration = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type_declaration; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= function_declaration 
            {
              Statement RESULT =null;
		int function_declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int function_declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDeclaration function_declaration = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = function_declaration; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= return_statement 
            {
              Statement RESULT =null;
		int return_statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int return_statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ReturnStatement return_statement = (ReturnStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = return_statement; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // empty_statement ::= SEMICOLON 
            {
              EmptyStatement RESULT =null;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object semicolon = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EmptyStatement(new ComplexSymbolFactory.Location(semicolonleft, semicolonright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty_statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // assign_statement ::= IDENT ASGN expr SEMICOLON 
            {
              AssignStatement RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int asgnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int asgnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object asgn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AssignStatement(new ComplexSymbolFactory.Location(asgnleft, asgnright), new Identifier(new ComplexSymbolFactory.Location(identifierleft, identifierright), identifier), expression); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // if_statement ::= IF LPAREN expr RPAREN LCURLYBRACE statement_list RCURLYBRACE 
            {
              IfStatement RESULT =null;
		int if_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int if_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object if_token = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lparenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lparenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object lparen = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rparenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rparenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object rparen = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int if_lcurlybraceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int if_lcurlybraceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object if_lcurlybrace = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statement_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statement_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> statement_list = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int if_rcurlybraceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int if_rcurlybraceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object if_rcurlybrace = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStatement(new ComplexSymbolFactory.Location(if_tokenleft, if_rcurlybraceright), expression, statement_list, Optional.empty()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // if_statement ::= IF LPAREN expr RPAREN LCURLYBRACE statement_list RCURLYBRACE ELSE LCURLYBRACE statement_list RCURLYBRACE 
            {
              IfStatement RESULT =null;
		int if_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int if_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object if_token = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int lparenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int lparenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object lparen = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int rparenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int rparenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object rparen = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int if_lcurlybraceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int if_lcurlybraceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object if_lcurlybrace = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int if_statement_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int if_statement_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Statement> if_statement_list = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int if_rcurlybraceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int if_rcurlybraceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object if_rcurlybrace = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int else_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int else_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object else_token = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int else_lcurlybraceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int else_lcurlybraceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object else_lcurlybrace = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int else_statement_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int else_statement_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> else_statement_list = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int else_rcurlybraceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int else_rcurlybraceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object else_rcurlybrace = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStatement(new ComplexSymbolFactory.Location(if_tokenleft, if_rcurlybraceright), expression, if_statement_list, Optional.of(else_statement_list)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // while_statement ::= WHILE LPAREN expr RPAREN LCURLYBRACE statement_list RCURLYBRACE 
            {
              WhileStatement RESULT =null;
		int whiletokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int whiletokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object whiletoken = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lparenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lparenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object lparen = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rparenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rparenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object rparen = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lcbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lcbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lcb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statement_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statement_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> statement_list = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rcbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rcbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rcb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileStatement(
                                new ComplexSymbolFactory.Location(whiletokenleft, whiletokenright),
                                expression,
                                statement_list
                            );
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variable_declaration_statement ::= VAR variable_declaration SEMICOLON 
            {
              VariableDeclarationStatement RESULT =null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object varname = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int variable_declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int variable_declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VariableDeclaration variable_declaration = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VariableDeclarationStatement(new ComplexSymbolFactory.Location(varnameleft, varnameright), variable_declaration); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_declaration ::= TYPE IDENT ASGN type_expression SEMICOLON 
            {
              TypeDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int asgnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int asgnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object asgn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int type_expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int type_expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractTypeExpression type_expression = (AbstractTypeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeDeclaration(
                                    new ComplexSymbolFactory.Location(typeleft, typeright),
                                    new Identifier(
                                        new ComplexSymbolFactory.Location(identifierleft, identifierright),
                                        identifier
                                    ),
                                    type_expression
                                ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function_declaration ::= FUNCTION IDENT LPAREN variable_declaration_list RPAREN DOUBLECOLON type_expression LCURLYBRACE statement_list RCURLYBRACE 
            {
              FunctionDeclaration RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object function = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int lparenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int lparenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object lparen = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int variable_declaration_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int variable_declaration_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<VariableDeclaration> variable_declaration_list = (List<VariableDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int type_expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int type_expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AbstractTypeExpression type_expression = (AbstractTypeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int statement_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statement_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> statement_list = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionDeclaration(
                                new ComplexSymbolFactory.Location(functionleft, functionright),
                                new Identifier(new ComplexSymbolFactory.Location(identifierleft, identifierright), identifier),
                                variable_declaration_list,
                                type_expression,
                                statement_list
                            ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // return_statement ::= RETURN expr SEMICOLON 
            {
              ReturnStatement RESULT =null;
		int return_keywordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int return_keywordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object return_keyword = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnStatement(
                                new ComplexSymbolFactory.Location(return_keywordleft, return_keywordright),
                                expression
                            );
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procedure_call ::= IDENT LPAREN expression_list RPAREN 
            {
              ProcedureCall RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lparenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lparenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lparen = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expression_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expression_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> expression_list = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ProcedureCall(
                                new ComplexSymbolFactory.Location(identifierleft, identifierright),
                                new Identifier(new ComplexSymbolFactory.Location(identifierleft, identifierright), identifier),
                                expression_list
                            ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function_call ::= IDENT LPAREN expression_list RPAREN 
            {
              FunctionCall RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lparenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lparenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lparen = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expression_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expression_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> expression_list = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionCall(
                                new ComplexSymbolFactory.Location(identifierleft, identifierright),
                                new Identifier(new ComplexSymbolFactory.Location(identifierleft, identifierright), identifier),
                                expression_list
                            ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variable_declaration ::= IDENT DOUBLECOLON type_expression 
            {
              VariableDeclaration RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int doublecolonleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int doublecolonright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object doublecolon = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int type_expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int type_expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractTypeExpression type_expression = (AbstractTypeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableDeclaration(
                                new ComplexSymbolFactory.Location(identifierleft, identifierright),
                                new Identifier(
                                    new ComplexSymbolFactory.Location(identifierleft, identifierright),
                                    identifier
                                ),
                                type_expression
                            );
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variable_declaration ::= IDENT DOUBLECOLON IDENT 
            {
              VariableDeclaration RESULT =null;
		int identifier1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identifier1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String identifier1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int doublecolonleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int doublecolonright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object doublecolon = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int identifier2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identifier2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String identifier2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableDeclaration(
                               new ComplexSymbolFactory.Location(identifier1left, identifier1right),
                               new Identifier(
                                   new ComplexSymbolFactory.Location(identifier1left, identifier1right),
                                   identifier1
                               ),
                               new NamedTypeExpression(
                                   new ComplexSymbolFactory.Location(identifier1left, identifier1right),
                                   new Identifier(new ComplexSymbolFactory.Location(identifier2left, identifier2right), identifier2)
                               )
                            );
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_expression ::= primitive_type_expression 
            {
              AbstractTypeExpression RESULT =null;
		int primitive_type_expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int primitive_type_expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PrimitiveTypeExpression primitive_type_expression = (PrimitiveTypeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = primitive_type_expression; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_expression ::= array_type_expression 
            {
              AbstractTypeExpression RESULT =null;
		int array_type_expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int array_type_expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayTypeExpression array_type_expression = (ArrayTypeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = array_type_expression; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_expression ::= record_type_expression 
            {
              AbstractTypeExpression RESULT =null;
		int record_type_expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int record_type_expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RecordTypeExpression record_type_expression = (RecordTypeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = record_type_expression; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // primitive_type_expression ::= primitive_type 
            {
              PrimitiveTypeExpression RESULT =null;
		int primitive_typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int primitive_typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PrimitiveType primitive_type = (PrimitiveType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveTypeExpression(
                                new ComplexSymbolFactory.Location(primitive_typeleft, primitive_typeright),
                                primitive_type
                            ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // array_type_expression ::= ARRAY LSQUAREBRACKET NUMBER RSQUAREBRACKET OF type_expression 
            {
              ArrayTypeExpression RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lsbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lsbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object lsb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int numberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rsbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object rsb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int type_expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int type_expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractTypeExpression type_expression = (AbstractTypeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayTypeExpression(
                                new ComplexSymbolFactory.Location(arrayleft, arrayright),
                                number,
                                type_expression
                            ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // array_type_expression ::= ARRAY LSQUAREBRACKET NUMBER RSQUAREBRACKET OF IDENT 
            {
              ArrayTypeExpression RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lsbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lsbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object lsb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int numberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rsbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object rsb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayTypeExpression(
                                new ComplexSymbolFactory.Location(arrayleft, arrayright),
                                number,
                                new NamedTypeExpression(
                                    new ComplexSymbolFactory.Location(identifierleft, identifierright),
                                    new Identifier(new ComplexSymbolFactory.Location(identifierleft, identifierright), identifier)
                                )
                            );
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // record_type_expression ::= RECORD LCURLYBRACE variable_declaration_list RCURLYBRACE 
            {
              RecordTypeExpression RESULT =null;
		int recordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int recordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object record = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lcbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lcbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lcb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int variable_declaration_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int variable_declaration_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<VariableDeclaration> variable_declaration_list = (List<VariableDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rcbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rcbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rcb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RecordTypeExpression(
                                new ComplexSymbolFactory.Location(recordleft, recordright),
                                variable_declaration_list
                            ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type_expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // primitive_type ::= STRING 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.STRING; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // primitive_type ::= INTEGER 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.INTEGER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // primitive_type ::= BOOLEAN 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.BOOLEAN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // variable_declaration_list ::= 
            {
              List<VariableDeclaration> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variable_declaration_list ::= variable_declaration 
            {
              List<VariableDeclaration> RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VariableDeclaration declaration = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<VariableDeclaration> list = new ArrayList(); list.add(declaration); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable_declaration_list ::= variable_declaration COMMA variable_declaration_list 
            {
              List<VariableDeclaration> RESULT =null;
		int variable_declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int variable_declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VariableDeclaration variable_declaration = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<VariableDeclaration> list = (List<VariableDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(0, variable_declaration); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression_list ::= 
            {
              List<Expression> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression_list ::= expr 
            {
              List<Expression> RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Expression> list = new ArrayList(); list.add(expression); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression_list ::= expr COMMA expression_list 
            {
              List<Expression> RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expression_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expression_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expression> expression_list = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 expression_list.add(0, expression); RESULT = expression_list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr PLUS term 
            {
              Expression RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression term = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(new ComplexSymbolFactory.Location(operatorleft, operatorright), Operator.ADD, expression, term); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr MINUS term 
            {
              Expression RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression term = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(new ComplexSymbolFactory.Location(operatorleft, operatorright), Operator.SUB, expression, term); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= term 
            {
              Expression RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression term = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = term; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= function_call 
            {
              Expression RESULT =null;
		int function_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int function_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionCall function_call = (FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = function_call; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // term ::= term STAR factor 
            {
              Expression RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression term = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int factorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression factor = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(new ComplexSymbolFactory.Location(operatorleft, operatorright), Operator.MUL, term, factor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // term ::= term SLASH factor 
            {
              Expression RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression term = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int factorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression factor = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(new ComplexSymbolFactory.Location(operatorleft, operatorright), Operator.DIV, term, factor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term ::= factor 
            {
              Expression RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression factor = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = factor; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= NUMBER 
            {
              Expression RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntLiteral(new ComplexSymbolFactory.Location(numberleft, numberright), number); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int lparenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lparenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lparen = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rparenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rparenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rparen = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expression; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= MINUS factor 
            {
              Expression RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int factorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression factor = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(new ComplexSymbolFactory.Location(operatorleft, operatorright), Operator.SUB, new IntLiteral(new ComplexSymbolFactory.Location(operatorleft, operatorright), 0), factor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= IDENT 
            {
              Expression RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableExpression(new ComplexSymbolFactory.Location(identifierleft, identifierright), new Identifier(new ComplexSymbolFactory.Location(identifierleft, identifierright), identifier)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= TRUE 
            {
              Expression RESULT =null;
		int true_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int true_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object true_token = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanLiteral(new ComplexSymbolFactory.Location(true_tokenleft, true_tokenright), true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= FALSE 
            {
              Expression RESULT =null;
		int false_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int false_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object false_token = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanLiteral(new ComplexSymbolFactory.Location(false_tokenleft, false_tokenright), false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
