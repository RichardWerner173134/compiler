/* ----------------------Preliminary Declarations Section--------------------*/

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.ComplexSymbolFactory;

import com.werner.compiler.ast.Program;
import com.werner.compiler.ast.statements.AssignStatement;
import com.werner.compiler.ast.statements.EmptyStatement;
import com.werner.compiler.ast.statements.Statement;
import com.werner.compiler.ast.statements.WhileStatement;
import com.werner.compiler.ast.statements.ProcedureCall;
import com.werner.compiler.ast.expressions.Expression;
import com.werner.compiler.ast.expressions.BinaryExpression;
import com.werner.compiler.ast.Identifier;
import com.werner.compiler.ast.expressions.literals.IntLiteral;
import com.werner.compiler.ast.PrimitiveType;
import com.werner.compiler.ast.statements.IfStatement;
import com.werner.compiler.ast.expressions.literals.BooleanLiteral;
import com.werner.compiler.ast.expressions.Operator;
import com.werner.compiler.ast.expressions.VariableExpression;
import com.werner.compiler.ast.declaration.VariableDeclaration;
import com.werner.compiler.ast.expressions.type.AbstractTypeExpression;
import com.werner.compiler.ast.expressions.type.ArrayTypeExpression;
import com.werner.compiler.ast.expressions.type.NamedTypeExpression;
import com.werner.compiler.ast.expressions.type.PrimitiveTypeExpression;
import com.werner.compiler.ast.expressions.type.RecordTypeExpression;
import com.werner.compiler.ast.declaration.TypeDeclaration;
import com.werner.compiler.ast.declaration.FunctionDeclaration;
import com.werner.compiler.ast.statements.VariableDeclarationStatement;
import com.werner.compiler.ast.statements.ReturnStatement;
import com.werner.compiler.ast.expressions.FunctionCall;
import com.werner.compiler.ast.expressions.literals.StringLiteral;
import com.werner.compiler.ast.expressions.initializer.ArrayExpression;
import com.werner.compiler.ast.expressions.initializer.AbstractObjectInitialization;
import com.werner.compiler.ast.declaration.ProcedureDeclaration;

import java.util.List;
import java.util.ArrayList;
import java.util.Optional;

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {

        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }

        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);

        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

/* ------------Declaration of Terminals and Non Terminals Section----------- */

terminal                                            SEMICOLON, DOUBLECOLON, COMMA, PLUS, MINUS, STAR, SLASH, LPAREN, RPAREN, EQUALS, NEQUALS, LESSOREQUAL, MOREOREQUAL, LESS, MORE, ASGN, LCURLYBRACE, RCURLYBRACE, LSQUAREBRACKET, RSQUAREBRACKET, IF, ELSE, WHILE;
terminal            Integer                         NUMBER;
terminal            String                          STRING_LITERAL;
terminal            String                          IDENT;
terminal                                            TRUE, FALSE;
terminal                                            VAR;
terminal                                            STRING, INTEGER, BOOLEAN;
terminal                                            ARRAY, OF;
terminal                                            RECORD;
terminal                                            TYPE;
terminal                                            FUNCTION;
terminal                                            RETURN;
terminal                                            _NEW;
terminal                                            VOID;

nonterminal         Expression                      expr, term, factor;
nonterminal         List<Expression>                expression_list;
nonterminal         Object                          program;
nonterminal         List<Statement>                 statement_list;
nonterminal         Statement                       statement;
nonterminal         AssignStatement                 assign_statement;
nonterminal         EmptyStatement                  empty_statement;
nonterminal         VariableDeclarationStatement    variable_declaration_statement;
nonterminal         ReturnStatement                 return_statement;
nonterminal         FunctionCall                    function_call;
nonterminal         ProcedureCall                   procedure_call;

nonterminal         IfStatement                     if_statement;
nonterminal         WhileStatement                  while_statement;

nonterminal         VariableDeclaration             variable_declaration;
nonterminal         List<VariableDeclaration>       variable_declaration_list;
nonterminal         PrimitiveType                   primitive_type;

nonterminal         AbstractTypeExpression          type_expression;
nonterminal         PrimitiveTypeExpression         primitive_type_expression;
nonterminal         ArrayTypeExpression             array_type_expression;
nonterminal         RecordTypeExpression            record_type_expression;

nonterminal         TypeDeclaration                 type_declaration;
nonterminal         FunctionDeclaration             function_declaration;
nonterminal         ProcedureDeclaration            procedure_declaration;

nonterminal         AbstractObjectInitialization    object_initialization;

/* ----------------------------Grammar Section-------------------- */

    program             ::= statement_list:stmnts
                        {: RESULT = new Program(new ComplexSymbolFactory.Location(stmntsleft, stmntsright), stmnts); :}
                        ;

    statement_list      ::= /* epsilon */
                        {: RESULT = new ArrayList(); :}

                        |   statement:statement statement_list:statement_list
                        {: statement_list.add(0, statement); RESULT = statement_list; :}
                        ;

    statement           ::= assign_statement:assign_statement
                        {: RESULT = assign_statement; :}
                        |   empty_statement:empty_statement SEMICOLON
                        {: RESULT = empty_statement; :}
                        |   procedure_call:procedure_call SEMICOLON
                        {: RESULT = procedure_call; :}

                        /* control structures */
                        |   if_statement:if_statement
                        {: RESULT = if_statement; :}
                        |   while_statement:while_statement
                        {: RESULT = while_statement; :}

                        /* declarations */
                        |   variable_declaration_statement:variable_declaration_statement
                        {: RESULT = variable_declaration_statement; :}
                        |   type_declaration:type_declaration
                        {: RESULT = type_declaration; :}
                        |   function_declaration:function_declaration
                        {: RESULT = function_declaration; :}
                        |   procedure_declaration:procedure_declaration
                        {: RESULT = procedure_declaration; :}

                        /* others */
                        |   return_statement:return_statement
                        {: RESULT = return_statement; :}
                        ;

 /* ----------------------------Statements Section-------------------- */

    empty_statement     ::= SEMICOLON:semicolon
                        {: RESULT = new EmptyStatement(new ComplexSymbolFactory.Location(semicolonleft, semicolonright)); :}
                        ;

    assign_statement    ::= IDENT:identifier ASGN:asgn expr:expression SEMICOLON
                        {: RESULT = new AssignStatement(new ComplexSymbolFactory.Location(asgnleft, asgnright), new Identifier(new ComplexSymbolFactory.Location(identifierleft, identifierright), identifier), expression); :}
                        ;

    if_statement        ::= IF:if_token LPAREN:lparen expr:expression RPAREN:rparen LCURLYBRACE:if_lcurlybrace statement_list:statement_list RCURLYBRACE:if_rcurlybrace
                        {: RESULT = new IfStatement(new ComplexSymbolFactory.Location(if_tokenleft, if_rcurlybraceright), expression, statement_list, Optional.empty()); :}
                        |   IF:if_token LPAREN:lparen expr:expression RPAREN:rparen LCURLYBRACE:if_lcurlybrace statement_list:if_statement_list RCURLYBRACE:if_rcurlybrace ELSE:else_token LCURLYBRACE:else_lcurlybrace statement_list:else_statement_list RCURLYBRACE:else_rcurlybrace
                        {: RESULT = new IfStatement(new ComplexSymbolFactory.Location(if_tokenleft, if_rcurlybraceright), expression, if_statement_list, Optional.of(else_statement_list)); :}
                        ;

    while_statement     ::= WHILE:whiletoken LPAREN:lparen expr:expression RPAREN:rparen LCURLYBRACE:lcb statement_list:statement_list RCURLYBRACE:rcb
                        {: RESULT = new WhileStatement(
                                new ComplexSymbolFactory.Location(whiletokenleft, whiletokenright),
                                expression,
                                statement_list
                            );
                        :}
                        ;

    variable_declaration_statement::= VAR:varname variable_declaration:variable_declaration SEMICOLON
                        {: RESULT = new VariableDeclarationStatement(new ComplexSymbolFactory.Location(varnameleft, varnameright), variable_declaration); :}
                        ;

    type_declaration    ::= TYPE:type IDENT:identifier ASGN:asgn type_expression:type_expression SEMICOLON
                        {: RESULT = new TypeDeclaration(
                                    new ComplexSymbolFactory.Location(typeleft, typeright),
                                    new Identifier(
                                        new ComplexSymbolFactory.Location(identifierleft, identifierright),
                                        identifier
                                    ),
                                    type_expression
                                ); :}
                        ;

    function_declaration::= FUNCTION:function IDENT:identifier LPAREN:lparen variable_declaration_list:variable_declaration_list RPAREN DOUBLECOLON type_expression:type_expression LCURLYBRACE statement_list:statement_list RCURLYBRACE
                        {: RESULT = new FunctionDeclaration(
                                new ComplexSymbolFactory.Location(functionleft, functionright),
                                new Identifier(new ComplexSymbolFactory.Location(identifierleft, identifierright), identifier),
                                variable_declaration_list,
                                type_expression,
                                statement_list
                            ); :}
                        |   FUNCTION:function IDENT:identifier LPAREN:lparen variable_declaration_list:variable_declaration_list RPAREN DOUBLECOLON IDENT:identifierReturn LCURLYBRACE statement_list:statement_list RCURLYBRACE
                        {: RESULT = new FunctionDeclaration(
                                new ComplexSymbolFactory.Location(functionleft, functionright),
                                new Identifier(new ComplexSymbolFactory.Location(identifierleft, identifierright), identifier),
                                variable_declaration_list,
                                new NamedTypeExpression(
                                    new ComplexSymbolFactory.Location(identifierReturnleft, identifierReturnright),
                                    new Identifier(new ComplexSymbolFactory.Location(identifierReturnleft, identifierReturnright), identifierReturn)
                                ),
                                statement_list
                            ); :}
                        ;

    procedure_declaration::= FUNCTION:function IDENT:identifier LPAREN:lparen variable_declaration_list:variable_declaration_list RPAREN DOUBLECOLON VOID:_VOID LCURLYBRACE statement_list:statement_list RCURLYBRACE
                        {: RESULT = new ProcedureDeclaration(
                                new ComplexSymbolFactory.Location(functionleft, functionright),
                                new Identifier(new ComplexSymbolFactory.Location(identifierleft, identifierright), identifier),
                                variable_declaration_list,
                                statement_list
                            ); :}
                        ;

    return_statement    ::= RETURN:return_keyword expr:expression SEMICOLON
                        {: RESULT = new ReturnStatement(
                                new ComplexSymbolFactory.Location(return_keywordleft, return_keywordright),
                                expression
                            );
                        :}
                        ;

    procedure_call      ::= IDENT:identifier LPAREN:lparen expression_list:expression_list RPAREN
                        {: RESULT = new ProcedureCall(
                                new ComplexSymbolFactory.Location(identifierleft, identifierright),
                                new Identifier(new ComplexSymbolFactory.Location(identifierleft, identifierright), identifier),
                                expression_list
                            ); :}
                        ;

    function_call       ::= IDENT:identifier LPAREN:lparen expression_list:expression_list RPAREN
                        {: RESULT = new FunctionCall(
                                new ComplexSymbolFactory.Location(identifierleft, identifierright),
                                new Identifier(new ComplexSymbolFactory.Location(identifierleft, identifierright), identifier),
                                expression_list
                            ); :}
                        ;

/* ----------------------------Declaration Section-------------------- */

    variable_declaration::= IDENT:identifier DOUBLECOLON:doublecolon type_expression:type_expression
                        {: RESULT = new VariableDeclaration(
                                new ComplexSymbolFactory.Location(identifierleft, identifierright),
                                new Identifier(new ComplexSymbolFactory.Location(identifierleft, identifierright), identifier),
                                type_expression
                            );
                        :}
                        |   IDENT:identifier1 DOUBLECOLON:doublecolon IDENT:identifier2
                        {: RESULT = new VariableDeclaration(
                               new ComplexSymbolFactory.Location(identifier1left, identifier1right),
                               new Identifier(
                                   new ComplexSymbolFactory.Location(identifier1left, identifier1right),
                                   identifier1
                               ),
                               new NamedTypeExpression(
                                   new ComplexSymbolFactory.Location(identifier1left, identifier1right),
                                   new Identifier(new ComplexSymbolFactory.Location(identifier2left, identifier2right), identifier2)
                               )
                            );
                        :}
                       ;

/* ----------------------------Type Section-------------------- */

    type_expression     ::= primitive_type_expression:primitive_type_expression
                        {: RESULT = primitive_type_expression; :}
                        |   array_type_expression:array_type_expression
                        {: RESULT = array_type_expression; :}
                        |   record_type_expression:record_type_expression
                        {: RESULT = record_type_expression; :}
                        ;

    primitive_type_expression ::= primitive_type:primitive_type
                        {: RESULT = new PrimitiveTypeExpression(
                                new ComplexSymbolFactory.Location(primitive_typeleft, primitive_typeright),
                                primitive_type
                            ); :}
                        ;

    array_type_expression ::= ARRAY:array OF:of type_expression:type_expression
                        {: RESULT = new ArrayTypeExpression(
                                new ComplexSymbolFactory.Location(arrayleft, arrayright),
                                type_expression
                            ); :}
                        |   ARRAY:array OF:of IDENT:identifier
                        {: RESULT = new ArrayTypeExpression(
                                new ComplexSymbolFactory.Location(arrayleft, arrayright),
                                new NamedTypeExpression(
                                    new ComplexSymbolFactory.Location(identifierleft, identifierright),
                                    new Identifier(new ComplexSymbolFactory.Location(identifierleft, identifierright), identifier)
                                )
                            );
                        :}
                        ;

    record_type_expression::=   RECORD:record LCURLYBRACE:lcb variable_declaration_list:variable_declaration_list RCURLYBRACE:rcb
                        {: RESULT = new RecordTypeExpression(
                                new ComplexSymbolFactory.Location(recordleft, recordright),
                                variable_declaration_list
                            ); :}
                        ;
    primitive_type      ::= STRING
                        {: RESULT = PrimitiveType.STRING; :}
                        |   INTEGER
                        {: RESULT = PrimitiveType.INTEGER; :}
                        |   BOOLEAN
                        {: RESULT = PrimitiveType.BOOLEAN; :}
                        ;

    variable_declaration_list ::= /* epsilon */
                        {: RESULT = new ArrayList(); :}
                        |   variable_declaration:declaration
                        {: List<VariableDeclaration> list = new ArrayList(); list.add(declaration); RESULT = list; :}
                        |   variable_declaration:variable_declaration COMMA:comma variable_declaration_list:list
                        {: list.add(0, variable_declaration); RESULT = list; :}
                        ;

/* ----------------------------Expression Section-------------------- */

    expression_list     ::= /* epsilon */
                        {: RESULT = new ArrayList(); :}
                        | expr:expression
                        {: List<Expression> list = new ArrayList(); list.add(expression); RESULT = list; :}
                        | expr:expression COMMA expression_list:expression_list
                        {: expression_list.add(0, expression); RESULT = expression_list; :}
                        ;

    expr                ::= expr:expression PLUS:operator term:term
                        {: RESULT = new BinaryExpression(new ComplexSymbolFactory.Location(operatorleft, operatorright), Operator.ADD, expression, term); :}
                        |   expr:expression MINUS:operator term:term
                        {: RESULT = new BinaryExpression(new ComplexSymbolFactory.Location(operatorleft, operatorright), Operator.SUB, expression, term); :}
                        |   expr:expression EQUALS:operator term:term
                        {: RESULT = new BinaryExpression(new ComplexSymbolFactory.Location(operatorleft, operatorright), Operator.EQ, expression, term); :}
                        |   expr:expression NEQUALS:operator term:term
                        {: RESULT = new BinaryExpression(new ComplexSymbolFactory.Location(operatorleft, operatorright), Operator.NEQ, expression, term); :}
                        |   expr:expression LESSOREQUAL:operator term:term
                        {: RESULT = new BinaryExpression(new ComplexSymbolFactory.Location(operatorleft, operatorright), Operator.LESSOREQUAL, expression, term); :}
                        |   expr:expression MOREOREQUAL:operator term:term
                        {: RESULT = new BinaryExpression(new ComplexSymbolFactory.Location(operatorleft, operatorright), Operator.MOREOREQUAL, expression, term); :}
                        |   expr:expression MORE:operator term:term
                        {: RESULT = new BinaryExpression(new ComplexSymbolFactory.Location(operatorleft, operatorright), Operator.MORE, expression, term); :}
                        |   expr:expression LESS:operator term:term
                        {: RESULT = new BinaryExpression(new ComplexSymbolFactory.Location(operatorleft, operatorright), Operator.LESS, expression, term); :}
                        |   term:term
                        {: RESULT = term; :}
                        |   function_call:function_call
                        {: RESULT = function_call; :}
                        |   STRING_LITERAL:string_literal
                        {: RESULT = new StringLiteral(new ComplexSymbolFactory.Location(string_literalleft, string_literalright), string_literal); :}
                        |   _NEW object_initialization:object_initialization
                        {: RESULT = object_initialization; :}
                        ;

    object_initialization ::=   ARRAY:array LSQUAREBRACKET:lsquarebracket expr:expression RSQUAREBRACKET:rsquarebracket OF type_expression:type_expression
                            {: RESULT = new ArrayExpression(new ComplexSymbolFactory.Location(arrayleft, arrayright), expression, type_expression); :}
                            |   ARRAY:array LSQUAREBRACKET:lsquarebracket expr:expression RSQUAREBRACKET:rsquarebracket OF IDENT:identifier
                            {: RESULT = new ArrayExpression(
                                    new ComplexSymbolFactory.Location(arrayleft, arrayright),
                                    expression,
                                    new NamedTypeExpression(
                                        new ComplexSymbolFactory.Location(identifierleft, identifierright),
                                        new Identifier(new ComplexSymbolFactory.Location(identifierleft, identifierright), identifier)
                                    )
                                ); :}
                        ;

    term                ::= term:term STAR:operator factor:factor
                        {: RESULT = new BinaryExpression(new ComplexSymbolFactory.Location(operatorleft, operatorright), Operator.MUL, term, factor); :}
                        |   term:term SLASH:operator factor:factor
                        {: RESULT = new BinaryExpression(new ComplexSymbolFactory.Location(operatorleft, operatorright), Operator.DIV, term, factor); :}
                        |   factor:factor
                        {: RESULT = factor; :}
                        ;

    factor              ::= NUMBER:number
                        {: RESULT = new IntLiteral(new ComplexSymbolFactory.Location(numberleft, numberright), number); :}
                        |   LPAREN:lparen expr:expression RPAREN:rparen
                        {: RESULT = expression; :}
                        |   MINUS:operator factor:factor
                        {: RESULT = new BinaryExpression(new ComplexSymbolFactory.Location(operatorleft, operatorright), Operator.SUB, new IntLiteral(new ComplexSymbolFactory.Location(operatorleft, operatorright), 0), factor); :}
                        |   IDENT:identifier
                        {: RESULT = new VariableExpression(new ComplexSymbolFactory.Location(identifierleft, identifierright), new Identifier(new ComplexSymbolFactory.Location(identifierleft, identifierright), identifier)); :}
                        |   TRUE:true_token
                        {: RESULT = new BooleanLiteral(new ComplexSymbolFactory.Location(true_tokenleft, true_tokenright), true); :}
                        |   FALSE:false_token
                        {: RESULT = new BooleanLiteral(new ComplexSymbolFactory.Location(false_tokenleft, false_tokenright), false); :}
                        ;